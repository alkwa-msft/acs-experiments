1. Mint a token on the server ✅
2. Offer the token through a POST route ✅
3. Take in the token and use it on the client side ✅

4. Set up a signalr connection between the server and the client ✅
5. Send a silly message through the signalr  ✅
6. Recieving calling events on the server and log them ✅
7. Send the calling event through signalr and respond to it on the client (using codespace)  ✅
8. Render the "events" from the server through the socketio connection to the client 🚧

9. Create an ARM template (input name of app service, and lets see if we can get a random funny name in there) ✅
- 1. Create an ACS resource ✅
- 2. Create a build to deploy to the app service ✅
- 3. Create an app service and deploy the bits ✅
- 4. Set up event grid topic with the ACS resource  ✅
- 5. Set up the callback url based on the passed in name for the app service 🚧
   I need to deploy a build to the service before we attempt to register 
   -5.a Create a build.zip in the build directory
   -5.b Create a storage acccount or use it to upload the build
- 6. Re-deploy steps 🚧
   - Should you have a public build to use ❌
   - Should we be forcing a build to be created from a codespace?  ✅
   - Should we require them to manually deploy?  🚧

*** Bonus
3. Offer the token through a POST route with an identifier passed in to get a new token
4. On the client, can we write the token to local storage
5. We may need a UI to show 


(ARM Template) - take in the same inputs
Create the resource group
- Create the serverfarm
- Create the storage account
- Create the site
- Create the ACS resource
- Set ACS resource to the site

(Manual)
- Upload the build to the storage account

(ARM Template) - take in the same inputs (same rg as above^)
- Run a deployment script to deploy to the app service
- Create EventGrid topic
- Register to eventgrid subscription
